/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package tetris.gui;

import java.awt.Color;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import tetris.lib.utils.Configurations;
import tetris.lib.utils.GlobalVariables;
import tetris.lib.utils.SoundPlayer;

/**
 *
 * @author Telmo
 */
public class GraphicsTetrisDialog extends javax.swing.JFrame {

    private Configurations config = new Configurations();

    /**
     * Creates new form GraphicsTetrisDialogs
     */
    public GraphicsTetrisDialog() {
        // Initialize components
        initComponents();

        // Set the location of the frame to the center of the screen
        setLocationRelativeTo(null);

        // Set the size of the frame
        setSize(505, 460);

        // Set the bounds of the tetris component
        tetris.setBounds(270, 28, 200, 350);

        // Set the bounds of the jPanel1 component
        jPanel1.setBounds(73, 391, 70, 20);

        // Set the background color of jPanel1
        jPanel1.setBackground(Color.WHITE);

        // Create a JLabel for the background image
        JLabel background;

        // Set the layout of the frame to null
        setLayout(null);

        // Load the image for the background
        ImageIcon img = new ImageIcon(config.getFilePathImage("jogo.png"));

        // Set the frame icon
        setIconImage(Toolkit.getDefaultToolkit().getImage(config.getFilePathImage("icon.png")));

        // Create a JLabel with the background image
        background = new JLabel("", img, JLabel.CENTER);
        background.setBounds(0, 0, 495, 420);
        add(background);

        // Set the frame as visible
        setVisible(true);

        // Set the default close operation of the frame
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Read the configuration
        config.ReadConfig(config.getCurrentPath());

        // Resize the tetris component based on the configuration
        tetris.resize(config.getLines(), config.getCols());

        // Generate a random piece for the tetris component
        tetris.generateRandomPiece();

        // Start the game with the configured difficulty
        tetris.startGame(config.getDifficulty());

        // Assign the ScoreValue component to GlobalVariables.jtext
        GlobalVariables.jtext = ScoreValue;

        // Set the frame as focusable and request focus
        setFocusable(true);
        requestFocus();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tetris = new tetris.lib.game.TetrisGame();
        jPanel1 = new javax.swing.JPanel();
        ScoreValue = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(509, 420));
        setResizable(false);
        setSize(new java.awt.Dimension(530, 470));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        tetris.setPreferredSize(new java.awt.Dimension(229, 356));

        javax.swing.GroupLayout tetrisLayout = new javax.swing.GroupLayout(tetris);
        tetris.setLayout(tetrisLayout);
        tetrisLayout.setHorizontalGroup(
            tetrisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );
        tetrisLayout.setVerticalGroup(
            tetrisLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 389, Short.MAX_VALUE)
        );

        ScoreValue.setText("0");
        ScoreValue.setName("ScoreValue"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScoreValue, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ScoreValue)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(tetris, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(tetris, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if (!tetris.isGameOver() && GlobalVariables.tetris == null) {
            switch (evt.getKeyCode()) {
                case KeyEvent.VK_ESCAPE -> {
                    // Show the pause dialog
                    new PauseDialog(tetris, config).setVisible(true);

                    // Stop the sound clip
                    SoundPlayer.clip.stop();

                    // Stop the game
                    tetris.stopGame();
                }
                case KeyEvent.VK_UP -> {
                    // Rotate the tetris piece
                    tetris.rotate();
                }
                case KeyEvent.VK_DOWN -> {
                    // Move the tetris piece down
                    tetris.moveDown();

                    // Check if the piece can no longer move down
                    if (!tetris.canMovePiece(1, 0)) {
                        // Freeze the piece in place
                        tetris.freezePiece();

                        // Delete full lines and update the score
                        tetris.deleteFullLines();
                        // Plays the piece sound
                        config.playPieceSound(config.getFilePathSound("piece.wav"));
                        config.setVolumePieceSound();

                        // Generates Random Piece
                        tetris.generateRandomPiece();
                        // Sets score
                        tetris.setScore((int) (tetris.getScore() + 5 * tetris.getDifficultyBonus()));

                        // Updates global Variables
                        GlobalVariables.jtext.setText(String.valueOf(tetris.getScore()));
                        GlobalVariables.currentScore = tetris.getScore();
                    }
                }
                case KeyEvent.VK_LEFT -> {
                    // Move the tetris piece to the left
                    tetris.moveLeft();
                }
                case KeyEvent.VK_RIGHT -> {
                    // Move the tetris piece to the right
                    tetris.moveRight();
                }
            }
        } else if (GlobalVariables.tetris == null) {
            // Close the dialog
            dispose();
        }
    }//GEN-LAST:event_formKeyPressed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        setFocusable(true);
        requestFocus();    }//GEN-LAST:event_formMouseClicked

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        if (!tetris.isGameOver()) {
            // Close the dialog
            dispose();

            // Stop the game
            tetris.stopGame();

            // Show the main application
            new MainApp().setVisible(true);
        }
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicsTetrisDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicsTetrisDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicsTetrisDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicsTetrisDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphicsTetrisDialog().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ScoreValue;
    private javax.swing.JPanel jPanel1;
    private tetris.lib.game.TetrisGame tetris;
    // End of variables declaration//GEN-END:variables
}
